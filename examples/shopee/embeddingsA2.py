# -*- coding: utf-8 -*-
"""Embeddings

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p4u9YEcyGwy2GhTAACewaESmDkK6sNjJ

**Input**: a large number of distributed dirty tables.

**Output**: delay in delivery predictions

We will use google drive to get the arxiv. But Linea should support other alternatives. Ideally, we should be able to load a zip file from S3 into... say, an in-memory database
"""

from google.colab import drive
drive.mount('/gdrive')

# with open('/gdrive/My Drive/foo.txt', 'w') as f:
#   f.write('Hello Google Drive!')
# !cat '/gdrive/My Drive/foo.txt'

import numpy as np
import pandas as pd

orders = pd.read_csv('/gdrive/MyDrive/_DA_Logistics/delivery_orders_march.csv')

orders.head()

"""
Explore each dataset separately with B2
1.   Remove rows with nulls
2.   Select on categorical features (e.g. location=USA)
"""

orders.info()

orders.buyeraddress = orders.buyeraddress.apply(lambda x: x.split()[-1]).str.title()
orders.selleraddress = orders.selleraddress.apply(lambda x: x.split()[-1]).str.title()

orders.head()
#TODO: Make sure that all buyer addresses and seller addresses are correct...
#Like Feed this through Wrangler or write a script

print(orders.buyeraddress.unique())
print(orders.selleraddress.unique())

manila, luzon, visayas, mindano = orders.buyeraddress.unique()
cities = (manila, luzon, visayas, mindano)

def sla(sellr, buyr):
  assert buyr in cities
  assert sellr in cities
  sla = {
    (manila, manila): 3,
    (manila, luzon): 5,
    (luzon, manila): 5,
    (luzon, luzon): 5,
  }

  return sla.get((sellr, buyr), 7)

orders['days_limit'] = [sla(s, b) for s,b in orders[['selleraddress', 'buyeraddress']].itertuples(index=False)]
orders.head()

# No wait...
# I don't think this is relevant..
# If I'm calculating dates...
# Is it dates or 

time_features = ['pick', '1st_deliver_attempt', '2nd_deliver_attempt']

orders[time_features] += 8 * 60 * 60
orders['2nd_deliver_attempt'] = orders['2nd_deliver_attempt'].replace(np.nan, 0)
for f in time_features:
    orders[f] = pd.to_datetime(orders[f], unit = 's').dt.date
    
orders.head()

"""## Analysis of Logistics Performance

Basic Concepts
Each orderid represents a distinct transaction on Shopee.

SLA can vary across each route (A route is defined as Seller’s Location to Buyer’s Location) - Refer to SLA_matrix.xlsx

Pick Up Time is defined as the time when the 3PL picks up the parcel and begins to process for delivery. It marks the start of the SLA calculation.

Delivery Attempt is defined as an attempt made by the 3PL to deliver the parcel to the customer. It may or may not be delivered successfully. In the case when it is unsuccessful, a 2nd attempt will be made. A parcel that has no 2nd attempt is deemed to have been successfully delivered on the 1st attempt.

All time formats are stored in epoch time based on Local Time (GMT+8).

Only consider the date when determining if the order is late; ignore the time.

Working Days are defined as Mon - Sat, Excluding Public Holidays.

SLA calculation begins from the next day after pickup (Day 0 = Day of Pickup; Day 1 = Next Day after Pickup)

2nd Attempt must be no later than 3 working days after the 1st Attempt, regardless of origin to destination route (Day 0 = Day of 1st Attempt; Day 1 = Next Day after 1st Attempt).

Only consider the date when determining if the order is late; ignore the time.

Assume the following Public Holidays:

2020-03-08 (Sunday);
2020-03-25 (Wednesday);
2020-03-30 (Monday);
2020-03-31 (Tuesday)

"""

holidays = ['2020-03-25','2020-03-30','2020-03-31']

orders['1st_attempt_days'] = np.busday_count(orders['pick'], orders['1st_deliver_attempt'], weekmask = '1111110', holidays = holidays)
orders['2nd_attempt_days'] = np.busday_count(orders['1st_deliver_attempt'], orders['2nd_deliver_attempt'], weekmask = '1111110', holidays = holidays)

orders.head()

"""Apply data transformations on the joined dataset
1. map(embedding, categorical_features)
2. Binning a continuous attribute into X quantiles

"""

orders['is_late'] = (orders['1st_attempt_days'] > orders['days_limit']) | (orders['2nd_attempt_days'] > 3)

orders.head()

orders.is_late.value_counts()

import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize = (8, 8))

ax = plt.pie(x = orders.is_late.value_counts(), labels = ['False', 'True'], explode = (0, 0.1), shadow = True, autopct = '%1.1f%%', startangle = 90)
plt.title('Percent of orders with late deliveries')
plt.show()